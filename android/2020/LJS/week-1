# week 1

## 변수(var) vs 상수(val) in Kotlin

기본적으로 변수와 상수는 값을 저장하고 데이터를 전달하는 데 사용되고 타입은 변수와 상수에 저장된 값의 유형을 나타낸다.
또한, 자료형을 선언하지 않아도 형추론을 지원하기에 괜찮타.
코틀린에서 변수는 var 상수는 val로 표현한다.

Ex)상수와 변수의 초기화
var a = 10 // 변수 var a:Int
의 형태로 변수의 자료형을 지정해 줄 수 있고, Nullable 자료형을 선언할때는 String?을 붙여주어야한다.
val b = 20 // 값 var b:Int
val은 Java의 final과 대응하며 b는 상수로 선언하였기에 값을 바꿀수가없다.


## Call by Reference vs Call by Value in Kotlin

함수 호출방법으로 Call by value(값에 의한 호출),Call by reference(참조에 의한 호출)이 있다.
Call by value(값에 의한 호출)는 인자로 받은 값을 복사하여 처리를 한다.
Call by reference(참조에 의한 호출)는 메서드 호출 시 사용되는 인자 값의 메모리에 저장되어있는 주소(Address)를 복사하여 보낸다.
즉, 값의 복사를 하여 처리하냐, 아니면 직접 참조하냐의 차이다.

Call by value(값에 의한 호출)의 장점은 복사를 하여 처리하기 때문에 안전하고 값이 보존된다.
단점은 복사를 하기에 메모리 사용이 늘어난다.

Call by reference(참조에 의한 호출)의 장점은 복사하지 않고 직접 참조하기에 빠르다.
단점은 직접 참조로 인해 원래 값의 영향을 받는다.


## Statement vs Expression in Kotlin

Expression(표현식)은 변수, 상수, 연산자, 함수로 구성되어 무언가 값을 만드는 문장을 의미한다.
즉, 값을 만들어낸다는 뜻이다.
Statement(구문)는 특정 단어나 기호의 조합으로 무언가가 실행되도록 명령을 지시하는 문장을 의미한다.

ex)
//표현식(expression)
10
10 + 20
sayHello()



//구문(statement)
for(i in 1..10) println("hello")
val data = 10

38번째 줄의 상수10으로 작성 되있는대 10이라는 결과값을 만들고,
39번째줄의  10+20은 30이라는 결과값을 만든다.
40번째줄의 sayHello() 함수의 결과값을 만든다.

이렇게 특정 문장을 수행해서 결과값을 만들때 표현식이라고 말한다,

45번째줄은 "hello"라는 문자열만 반복되고 값이  생성되지는 않는다.
46번째줄도 data변수의 10이 대입되고 값이 생성되지 않기에 이런것들은 statement(구문)이라고 한다.

expression은 새로운 값을 만드는 것이어서 대입 연산자(=) 오른쪽에 명시할 수 있거나 함수의 매개변수를 대입할수있다.


## 일급객체(What is first citizen?)

밑에 조건을 충족하면 1급 객체라 할수있다.

1.변수나 데이타에 할당 할 수 있어야한다.
ex)
var abc = function(){
}//익명 함수를 abc 변수에 담을 수 있다.

2.객체의 인자(파라미터)로 넘길 수 있어야한다.
3.객체의 리턴값을 리턴 할 수 있어야한다.
4.할당에 사용된 이름과 관계없이 고유한 구별이 가능하다.
5.동적으로 property 할당이 가능하다.
